package com.xxliao.pattern.behavioral.interpreter;

/**
 * @author xxliao
 * @description: 设计模式 - 行为型模式 - 解释器模式
 *
 * 定义：给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子。
 * 例如：a+b+c=d,这种就是一种”语言“的句子。
 *
 * 抽象语法树（AbstractSyntaxTree）：是源代码语法结构的一种抽象表示，它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。
 *
 * 结构：
 * 1.抽象表达式角色（Abstract Expression）：定义解释器的接口，约定解释器的解释操作，主要包含有解释方法interpret（）；
 * 2.终结符表达式角色（Terminal Expression）：抽象表达式的子类，用来实现文法中与终结符线管操作，文法中每一个终结符都有一个具体总结表达式与之对应。
 * 3.非终结表达式角色（Nonterminal Expression）:抽象表达式子类，用来实现文法中与非终结符相关的操作，文法中的每条规则都应于一个非终结符表达式。
 * 4.环境角色（Context）：通常包含各个解释器需要的数据或者公共的功能，一般用来传递被所有解释器共享的数据，后面的解释器可以从这里获取值。
 * 5.客户端（Client）：主要任务是将需要分析的句子或者表达式 转换成使用解释器对象描述的抽象语法树，然后调用解释器的解释方法，也可以通过环境角色
 *   间接访问解释器的解释方法。
 *
 * @date 2024/5/26 22:39
 */

public class InterpreterPattern {
}
