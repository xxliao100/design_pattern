package com.xxliao.pattern.structure.proxy;

/**
 * @author xxliao
 * @description: 设计模式-结构性模式-代理模式
 *
 * 定义：
 * 代理模式就是为一个对象提供一个替身，以控制对这个对象的访问，更可以达到对该对象功能的增强。
 *
 * 结构：
 * 1.抽象主题类（Subject）：通过接口或者抽象类申明真实主题和代理对象实现的业务方法。
 * 2.真实主题类（Real Subject）：实现了抽象主题中的具体业务，是代理对象所代表的真实对象，是最终要引用的对象。
 * 3.代理类（Proxy）：提供了和真实主题相同的接口，在内部含有对真实主题的引用，它可以访问、控制或者扩展真实主题的功能。
 *
 * 代理常见的有3种类：静态代理、JDK动态代理、cglib代理
 * 1.静态代理和JDK代理模式都要求目标对象实现了一个接口，而cglib不要求目标对象实现接口。
 * 2.在AOP编程中如何选择代理模式：目标对象实现了接口采用JDK代理，目标对象未实现接口采用cglib代理。
 *
 *
 * @date 2024/5/24 18:18
 */

public class ProxyPattern {
}
