package com.xxliao.pattern.creational.builder;

/**
 * @author xxliao
 * @description: 设计模式-创建型模式-建造者模式
 *
 * 定义：将对象的创建和表示分离，分离了对象的构建（Builder）和装配（Director）,实现了构建和装配的解耦。
 * 不同的构建，相同的装配，可以创建不同的对象，相同的构建器，不同的装配顺序也可以做出不同的对象。
 *
 * 结构：
 * 1.抽象建造者类（Builder）：规定了要实现复杂对象的那部分的创建，但是并不涉及具体部件对象的创建。
 * 2.具体建造者类（ConcreteBuilder）：实现了Builder接口，完成复杂产品各个不见的具体创建方法。在构造方法完成后，提供产品的实例。
 * 3.产品类（Product）：要创建的复杂对象。
 * 4.指挥者类（Director）：调用具体建造者类来创建复杂对象的各个部分，在知道这中不涉及具体产品的信息，只保证对象各部分完整活按顺序创建。
 *
 *
 * 优点：
 * 1.建造者模式中，客户端不必知道产品内部组成的细节，将产品本身和产品的创建过程解耦，使用相同的创建过程可以创建不同的产品对象。
 * 2.建造者模式易于扩展，如果有新的需求，通过实现一个新的建造类就可以完成， 不用修改原有代码，符合开闭原则。
 *
 * 缺点：
 * 建造者模式所创建的产品一般具有较多的共同点，组成部分相似，如果产品差异很大，则不合适使用建造者模式。
 *
 * @date 2024/5/24 16:42
 */

public class BuilderPattern {
}
